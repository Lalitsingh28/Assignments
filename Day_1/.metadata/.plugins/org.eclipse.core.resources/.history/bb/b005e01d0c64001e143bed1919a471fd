package com.assignment.service;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;

public class ApiService {
	
	private final String apiKey = "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";
    private final String apiUrl = "https://api.openai.com/v1/engines/gpt-3.5-turbo/completions";
    

    public String generateContent(String keyword) {
        try {
            // Create a URL object for the ChatGPT API endpoint
            URL url = new URL(apiUrl);

            // Open a connection to the API endpoint
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();

            // Set the request method to POST
            connection.setRequestMethod("POST");

            // Set the API key as an HTTP header
            connection.setRequestProperty("Authorization", "Bearer "+apiKey);

            // Enable input and output streams
            connection.setDoInput(true);
            connection.setDoOutput(true);

            // Construct the request payload
            String requestBody = "prompt=" + keyword;

            // Write the payload to the request body
            try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {
                byte[] payload = requestBody.getBytes(StandardCharsets.UTF_8);
                outputStream.write(payload, 0, payload.length);
            }

            // Get the response code from the API
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                // Read and parse the response content
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    StringBuilder response = new StringBuilder();
                    String line;

                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }

                    // Extract the generated content from the response
                    // Assuming the response is in JSON format with a 'choices' field
                    String jsonResponse = response.toString();
                    String generatedContent = parseGeneratedContent(jsonResponse);

                    return generatedContent;
                }
            } else {
                // Handle error cases here (e.g., return an error message)
                return "Error: Unable to generate content. Response code: " + responseCode;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return "Error: An exception occurred while making the API request.";
        }
    }

    // Parse the generated content from the JSON response
    private String parseGeneratedContent(String jsonResponse) {
        // Implement JSON parsing logic here
        // Extract the 'choices' field or relevant content from the JSON response
        // and return it as the generated content
        // You may use a JSON parsing library like Jackson for this purpose

        // Example:
        // JsonObject jsonObject = new JsonParser().parse(jsonResponse).getAsJsonObject();
        // String generatedContent = jsonObject.get("choices").get(0).getAsJsonObject().get("text").getAsString();

        // Replace this with your actual JSON parsing logic

        return "Generated content goes here";
    }



}
